// Code generated by goctl. DO NOT EDIT!
// Source: history.proto

//go:generate mockgen -destination ./history_mock.go -package history -source $GOFILE

package history

import (
	"context"

	history "github.com/just-coding-0/learn_example/micro_service/echo/rpc/history/pb"

	"github.com/tal-tech/go-zero/core/jsonx"
	"github.com/tal-tech/go-zero/zrpc"
)

type (
	History interface {
		Add(ctx context.Context, in *AddRequest) (*AddResponse, error)
		Last(ctx context.Context, in *LastRequest) (*LastRequestResponse, error)
	}

	defaultHistory struct {
		cli zrpc.Client
	}
)

func NewHistory(cli zrpc.Client) History {
	return &defaultHistory{
		cli: cli,
	}
}

func (m *defaultHistory) Add(ctx context.Context, in *AddRequest) (*AddResponse, error) {
	var request history.AddRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := history.NewHistoryClient(m.cli.Conn())
	resp, err := client.Add(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret AddResponse
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}

func (m *defaultHistory) Last(ctx context.Context, in *LastRequest) (*LastRequestResponse, error) {
	var request history.LastRequest
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := history.NewHistoryClient(m.cli.Conn())
	resp, err := client.Last(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret LastRequestResponse
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}
